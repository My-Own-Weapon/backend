name: Build and Deploy to EC2

# 워크플로우가 언제 실행될 것인지 조건 명시
on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main" ]

# AWS 관련 값 변수로 설정
env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: wagu-book-gitget-deploy-bucket
  AWS_CODE_DEPLOY_APPLICATION: WAGU-Book-Application-CD
  AWS_CODE_DEPLOY_GROUP: WAGU-Book-Deployment-Group

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      # 1. java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: clean bootJar
  
      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .
  
      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
  
      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
        
  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정 
  run-docker-image-on-ec2:
    # deploy (위)과정이 완료되어야 실행됩니다.
    needs: deploy
    runs-on: self-hosted
  
    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
      
      # 2. 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 3. MySQL 재실행
      - name: docker run mysql
        run: sudo docker start mysql-container
  
      # 4. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
  
      # 5. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f
